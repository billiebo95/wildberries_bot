import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import Command
from config import BOT_TOKEN
from database import init_db, add_user, add_tracking, get_all_tracking, update_price
from parser import get_price

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()
init_db()

main_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞—Ä—Ç–∏–∫—É–ª")],
        [KeyboardButton(text="üìã –ú–æ–∏ —Ç–æ–≤–∞—Ä—ã")]
    ],
    resize_keyboard=True
)

@dp.message(Command("start"))
async def start(message: types.Message):
    add_user(message.from_user.id)
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ü–µ–Ω –Ω–∞ Wildberries.\n\n"
        "–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –∞—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞, –∏ —è –Ω–∞—á–Ω—É –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Ü–µ–Ω—É!",
        reply_markup=main_kb
    )

@dp.message(lambda message: message.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞—Ä—Ç–∏–∫—É–ª")
async def ask_article(message: types.Message):
    await message.answer("–û—Ç–ø—Ä–∞–≤—å –∞—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞:")

@dp.message()
async def handle_article(message: types.Message):
    if message.text.isdigit():
        article = message.text
        price = get_price(article)
        if price:
            add_tracking(message.from_user.id, article, price)
            await message.answer(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω —Ç–æ–≤–∞—Ä {article}. –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {price}‚ÇΩ.")
        else:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É. –ü—Ä–æ–≤–µ—Ä—å –∞—Ä—Ç–∏–∫—É–ª.")
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å —Ç–æ–ª—å–∫–æ –Ω–æ–º–µ—Ä –∞—Ä—Ç–∏–∫—É–ª–∞.")

async def price_checker():
    while True:
        tracking_data = get_all_tracking()
        for user_id, article, old_price, levels in tracking_data:
            new_price = get_price(article)
            if new_price and new_price < old_price:
                percent_drop = 100 * (old_price - new_price) / old_price
                notify_thresholds = [int(p) for p in levels.split(",")]
                for threshold in notify_thresholds:
                    if percent_drop >= threshold:
                        await bot.send_message(
                            user_id,
                            f"üìâ –¶–µ–Ω–∞ –Ω–∞ —Ç–æ–≤–∞—Ä {article} —É–ø–∞–ª–∞ –Ω–∞ {int(percent_drop)}%!\n"
                            f"–°—Ç–∞—Ä–∞—è: {old_price}‚ÇΩ\n–ù–æ–≤–∞—è: {new_price}‚ÇΩ"
                        )
                        update_price(user_id, article, new_price)
                        break
        await asyncio.sleep(3600)

async def main():
    asyncio.create_task(price_checker())
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
